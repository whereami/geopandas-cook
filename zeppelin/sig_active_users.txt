%pyspark

import pandas as pd
from pandas import DataFrame

import geopandas as gpd
from geopandas import GeoDataFrame

from shapely.geometry import Point

import matplotlib
import matplotlib.pylab as plt

from pyspark.sql import HiveContext

import StringIO

def show(p, d):
    img = StringIO.StringIO()
    p.savefig(img, format='svg')
    img.seek(0)
    print "%html <div style='margin: 0; padding: 0;width:100%'><div style='width:80%; display:inline-block; *display:inline;vertical-align: top;'>" + img.buf + "</div>"

    tbl = StringIO.StringIO()
    d.to_html(tbl, classes=['pure-table','pure-table-horizontal'])
    tbl.seek(0)
    print "<div style='width:15%; display:inline-block; *display:inline; font-size:10;vertical-align: top;'>" + tbl.buf + "</div></div>"

sqlContext = HiveContext(sc)

geodata = gpd.GeoDataFrame.from_file('/home/aidenoh/kiwi_lab/shapes/CTPRVN/TL_SCCO_CTPRVN_UNICODE_4326.shp', encoding='utf-8')
select = geodata.apply(lambda x: (x.CTPRVN_CD, x.CTP_KOR_NM), axis=1).tolist()

summary_date = z.input('날짜')
summary_location = z.select("지역", select)

sql = """
select s.kiwi_child_id,
java_method('io.kiwiplus.kiwi.analytics.location.common.MySQLCipher', 'asDouble', l.latitude) latitude,
java_method('io.kiwiplus.kiwi.analytics.location.common.MySQLCipher', 'asDouble', l.longitude) longitude
from (
	select kiwi_child_id, max(from_time) max_from_time
	from kiwi.kiwi_child_location_log
	where to_date(concat(year, '-', month, '-', day)) = '%s' and provider in ('gps', 'network') and latitude != '' and longitude != '' and latitude is not null and longitude is not null
	group by kiwi_child_id
) s
join kiwi.kiwi_child_location_log l on l.kiwi_child_id = s.kiwi_child_id and s.max_from_time = l.from_time
where to_date(concat(l.year, '-', l.month, '-', l.day)) = '%s'
""" % (summary_date, summary_date)

table_name = 'population_sig_%s' % (summary_date)
table_name = table_name.replace('-', '_')

sqlContext.sql(sql).createOrReplaceTempView(table_name)
sqlContext.cacheTable(table_name)

df = sqlContext.sql("select * from %s" % table_name).toPandas()

df = GeoDataFrame(df, crs={'init':'epsg:4326'})
geometry = df.apply(lambda x: Point(float(x.longitude), float(x.latitude)), axis=1)
df = df.set_geometry(geometry)

geodata = gpd.GeoDataFrame.from_file('/home/aidenoh/kiwi_lab/shapes/SIG/TL_SCCO_SIG_UNICODE_4326.shp', encoding='utf-8')
geodata = geodata[geodata.SIG_CD.str.startswith(summary_location)]

gdf = gpd.sjoin(df, geodata, how='inner', op='within')


summary = gdf.SIG_CD.value_counts()
summary = summary.reset_index()
summary.columns = ('SIG_CD', 'total')
summary = summary.merge(geodata)

summary['coords'] = summary['geometry'].apply(lambda x: x.representative_point().coords[:])
summary['coords'] = [coords[0] for coords in summary['coords']]


summary = GeoDataFrame(summary, crs={'init':'epsg:4326'})

krfont = {'family' : 'unbatang', 'weight' : 'bold', 'size'   : 6}
matplotlib.rc('font', **krfont)

summary.plot(column='total', cmap='coolwarm')

for idx, row in summary.iterrows():
    plt.annotate(s=row.SIG_KOR_NM, xy=row.coords, horizontalalignment='center')

sm = plt.cm.ScalarMappable(cmap='coolwarm', norm=plt.Normalize(vmin=summary.total.min(), vmax=summary.total.max()))
sm._A = ()
plt.colorbar(sm)

summary_table = summary[['SIG_KOR_NM', 'total']]
summary_table.columns = ['지역 이름', '합계']
show(plt, summary_table)